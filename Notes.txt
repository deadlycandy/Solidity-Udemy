SECTION 1: WHAT IS ETHEREUM?

Introduction: 
- Building three apps throughout the course. 
- Building web apps. 

Completed Project Code: https://github.com/StephenGrider/EthereumCasts

Short History Lesson:
- Bitcoin paper 2008, decenteralized transaction network.
- Vitalik, Ethereum 2013, added complexity to Bitcoin network i.e. smart contracts
    -- Smart Contract lives on the blockchain, allows for more complex interactions and applications.

What is Ethereum?:
- Network of computers used to transfer money and store data.
- Multiple Ethereum networks, one primary network that people deploy product applications.
    -- Development and private networks.
- A node is a client running an ethereum client. 
    -- Anyone can run a node.
    -- Each Node can contain a full copy of the blockchain. 
- Blockchain is a database that stores a record of all the transactions in the network. 

Interfacing with Ethereum Networks:
- Tech used by Devs: web3.js (talk to the network through code, send money, deploy contracts, store data).
- Tech used by consumers: Metamask (chrome extension) & Mist Browser (full broswer).
    -- Main network is the production ready network.
    -- Using Rinkeby Test Network 

Ethereum Accounts:
- Account Address, Public Key, and Private key make up an Ethereum account.
    -- Keys used to authorize transaction 
    -- Stored as Hex-decimal numbers
- An account is used across all networks. 

Receiving Ether:
- Try later Rinkeby-faucet.com

What's a Transaction?:
- An account can have different account balance in different networks. Contained networks.
- Click submit button -> took address sent to backenend server -> Used web3 lib to create transaction object
    -- Transaction (record of money being sent from one account to another) composed of:
        --- nonce: How many times the sender has sent a transaction
        --- recipient address: Who to send this money to.
        --- value: Amount of ether to send to the recipient.
        --- gasPrice: Amount of ether the sender is willing to pay per unit gas to get this transaction processed
        --- startGas/gasLimit: Units of gas that this transaction can consume.
        -- v,r,s: Cryptographic pieces of data that can be used to generate the senders account address. Generated from the senders private key. 

Why'd We Wait?:
- Transaction is sent out to the network, and wait for the network to confirm the transaction.
- Network must be robust, priority == robustness. 
- The transaction is sent to one specific node, which then propagates the transaction information to the other nodes. 
- The node takes the transactions (ours and others) assembles the transactions into a list and forms a block. 
    -- Then preforms validation logic, mining, finding the hash sequence. 

Basic Blockchains:
- SHA 256: digital finger print of a set of data.
    -- Hash length is fixed. 
    -- Cannot pre-guess.
    -- Hash only changes if the data changes. 
- Block breaks the data up into three sections (number, nonce, and data).
    -- Begins with a certain amount of zeros, indicating it has been signed (valid block).
    -- Nonce is a number you change to make the block to start with the desired amount of zeros. 
        --- Mine button will look through all the numbers to find a number that hashes with the correct amount of leading zeros. 
- Blockchain (same as a block) now includes previous blocks hash (points backwards)
    -- Changing a previous blocks contents, changes the hash, and results in breaking blocks ahead of it. 
        --- Must re-mine the block and all following it. 
    -- Keeps contains of previous blocks secure and resistant to change. 
- Distributed Blockchain 
    -- All peers have a complete copy of the blockchain
    -- The distributed network looks for majority within the network, comparing the most recent blocks hash.
- Tokens 
    -- Data is replaced with transactions, no limit on number of transactions. 
    -- Chaning the transactions changes the hash of the next block, creating immutability. 
        --- Resiting modification of past events (ledger).
    -- Only tracking money movement, not an accounts total amount of. 
    -- Begs the question, does a person have enough to send that amount?
- Coinbase Transaction
    -- The idea that there is a base transaction that gives a user a certain amount of money.
        -- This could be a genisis block or a receiving money from another user. 
    -- Using this you can trace the providence of a transaction all the way back to ensure that a user hash the correct amount of money. 

Block Time: 
- Blockchain description by Anders: anders.com/blockchain/block.html
-1111 Can think of the hash as a large number. 
- The hash must be lower than some target value (in base 10).
    -- Represented via leading number of zeros, reality is looking at the value of the hash. 
- Hashs are 64 characters long, range of base ten value 0 to 1.1.5 x 10^77
- Time to find the solution = Block time
    -- Time it takes to hash every hash from 0 to the number to reach target value
- Once a node has found a value, it must distribute the solution to the network. That adds additional time.
- Ethereum network has a target block time of 15 seconds, ideally it takes on average 15 seconds. 
- Target value is adjusted based on block times to maintain a certain level of completion time. 
    -- lower target value slower, vice versa. 
- Example: etherscan.io/chart/blocktime

Smart Contracts:
- High level: an account controlled by code. Instructs the contract how to behave. 
- Contract Account contains
    -- Balance: amount of ether controlled by the contract.
    -- Storage: Data stored related to the contract, any type of data that is relvant to the application we are trying to make. 
    -- Code: Contains the raw machine code for this contract. 
- External Accounts: owned by an entity decoupled from any network.
- Contract Account is created on one specific network. Must be deployed on each network on a new account.
- Authoring contract code becomes the contract source.
    -- Deploying the contract code creates an instance of the contract, aka a contract account.
        --- Similar to a class and instance relationship in the programming world. 
            ---- Contract source code is the class. Create copies/instances by deploying it to a network.

The Solidity Programming Language:
- Designed for authoring Smart contracts. 
- .sol file type. 
- Strongly typed. 
- Similar to Javascript (similar syntactically).
- Authoring a contract quickly, application code takes longer.
- Contract Definition -> Solidity complier -> Byte code ready for deployment
                                           -> Application Binary interface (ABI)
    -- ABI is used to interact with the contract through the applicaton. 
        --- Easily ledgible and interface for bytecode. 

Our First Smart Contract:
- Using online editor: remix.ethereum.org

Contract Structure:
- Pragma statement defines which compiler version to user, prevents code from breaking as language evolves.
- Contract defines a new contract. 
- Storage variable is one that is automatically stored onto the ethereum blockchain. 
    -- Contrast to local variable, never persistance. 
- Contracts have constructors.

Function Declarations:
- function [name][function type][return type]
    -- function getMessage() returns (string) {}
- Common Function types
    -- public: Anyone can call this function
    -- private: Only this contract can call this function
    -- view / constant: This function returns data and does not modify the contracs data. 
    -- pure: Function will not modify or even read the contracts data.
    -- payable: When someone calls this function they might send ether along.
- Cannot return data from function that modifys state of the contract. 

Testing with Remix:
- Deploys into inbbroswer fake network.
- Inbox contract stores a message variable and can be modified or reterieved. 
- First Gotcha: Whenever you define a storage variable as public the contract will autogenerate a function to get the value of the varaible.
    -- get function is redundant. 

Redeploying Contract:
- When updating code, must redeploy the contract to reflect changes.

Behind the Scenes of Deployment:
- The big difference between money sending transcation and contract creation transaction the to field is left blank to indicate contract creation.
    -- To field being blank creates blank contract.

More on Running Functions Than You Want to Know:
- Updating any data on the blockchain -> submit a transaction.
    -- Must wait for validation.
    -- setMessage function must involve a transaction 
- Calling a function  
    -- Calling a function does not modify data. 
    -- Is free.
    -- Runs instantly
- Sending a transaction to a function.
    -- Modifying any data in our contract.
    -- Takes time to execute (Second Gotcha).
        --- Test networks operate instantly. Public networks take time.
    -- Returns the transaction hash (Third Gotcha).
    -- Cost money (Fourth Gotcha).

Wei vs Ether:
- wei, gwei, finney, ether all units of ether. 
    -- No fractional wei, lowest 1 wei. 
- wei converter (online tools)

Gas and Transaction:
- Must pay some money to run contracts (Gas).
- Each mathmatical operation cost a certain price. 
    -- Gas costs on a given operation (public sheet).
- gasPrice: amount of wei the sender is willing to pay per unit gas to get this transaction processed.
- startGas/gasLimit: Units of gas that this transaction can consume.
- Transaction to call function doMath has a gasPrice and gasLimit.
    -- Each operation triggers a check ensure there is enough gas. Fails the execution if not enough gas. 
    -- Left over gas is returned.
    -- total cost =  gasPrice x gas used 

Mnemonic Phrases:
- 12 word phase that is linked to account details (public, private,)
- Easier to manage keys

Getting More Ether:
- faucet.rinkeby.io
    -- must use social media.

SECTION 2 Smart Contracts and Solidity

Contract Deployment:
- Contract source -> solidity compiler -> Contract bytecode -> rinkeby
                                       -> ABI 
- Truffle: command line tool to aid in contract dev, testing, and deployment.
    -- common tool (rapid changes, stuff breaks, and things dont work)
- The dependencies that you use will break.
- Going to build custom node project for deploying contracts.

Boilerplate Requirements:
- Potential issues
    -- Need to be able to wire solidity code in a js project 
        --- set up solidit complier to build our contracts.
    -- Need way to rapidly test contracts without doing the manual testing 
        --- Set up custom mocha test runner that test solidity code.
    -- Need to deploy our contracts to public networks.
        --- Set up a deploy script to compile and deploy.

Compiling Solidy:
- Using require function to include files will cause error.
- Path gaurentees valid paths for all file systems.

The Compile Script:
- Contracts are compiled like objects. Can access individual contracts using contracts[':Inbox']

Testing Architecture:
- Using Ganache/TestRPC to create local network for deployment.
- Web3 portal to access deployed contract.

Web3 Versioning:
- When using web3 must call a constructor.
- End all use to get programatic access to ethereum network
- v0.x.x: primitive interface only callbacks for async code
- v1.x.x: support for promises +async/wait.
    -- Most support posts are of v0.x.x

Web3 Providers:
- only working with one instance of web3
- Use the constructor to create an instance of web3 
    -- configure it with a provider. Communication layer between web3 and ethereum network.
    -- Exepects a provider.
- Change ganache provider to connect to another network.

Testing with Mocha:
- Used to test any js application.
- General purpose 
- it: run a test and make an assertion.
- describe: groups together it functions.
- beforeEach: Executre some general setup code.
- Assert checks equivalnces between two values.
- To run mocha, change package.json file test field to mocha.
    - use command: npm run test 
 
Mocha Structure:
- Mocha starts -> deploy a new contract (beforeEach) -> manipulate the contract (it) -> make an assertion about the contract (it) 
- Ganache provides test accounts to use.

Fetching Accounts from Ganache:
- All functions in web3 are async
- Can be used to access other crypto networks.

Deployed Inbox Overview:
- All code is tied to the web3 library.
- Web3 with contracts
- Use web3 to get access to deployed contracts.
- Interact with deployed contract: ABI and Address of deployed contract.
- Create a contract: ABI and Bytecode

Infura deployment/Signup:
- Infura talks to the rinkeby network
- Must use account that has ether on the rinkeby network
- Must access rinkeby through infura node

SECTION 3: Advance Smart Contracts

The Lottery Contract/Design:
- Prize pool of ether and list of people 
- After x time a manager tells the contract to pick a winner
    -- Sending the winnings to the selected winner
- Variables: Manager (address of person who created contract) and Array of Players (addresses)
- Functions: Enter and pickWinner

Basic Solidity Types:
- String
- Bool
- Int
    - intX: x reps number of bits.
    - int == int256
- Uint: unsigned, positive. no decimal.
- Fixed/ufixed: Fixed point number, number w/ decimal after.
- Address: Has methods tied to it for sending money. (0x18ba...)

Starting the Lottery Contract:
- Private / public is more about showing other developers if a variable is easy to access not security.

The Message Global Variable:
- Assign manager with deployers address 
- Global variable including anytime a contract function is inovoked.
- Account -> Transaction -> Contract Instance 
  \  msg object describes /
- Msg Global Variabel
    -- msg.data: Data field from the call or transaction invoked 
    -- msg.gas: Amount of gass the current function invocation has
    -- msg.sender: Address of the account who initiated the current function invocation.
    -- msg.value: Amount of ether that was sent along.

Overview of Arrays:
- Fixed Array: single type and fixed length. int[3]
- Dynamic Array: single type and changable length. int[] (empty)
- Mapping: Key value pairs. Keys all same type. Values must be same type.
    -- Used for collection of data.
- Struct: Collection of key value pairs that can have different types. 
- Auto get function for arrays does not get the entire array. Must give an index.

Validation with Require Statements:
- require function is global
- checks if a expression is valid if not exits out of the function. 
- Error message does not provide information for reason of failure. 
    -- Check require functions.

Pseudo Random Number Generator:
- Solidity does not have a random number generator.
- Technically can be gamed. 
- Our version: Current block difficulty + current time + addressess of players -> sha3 -> big numbero

Select a Winner:
- Call random function % players.length -> number between 0 and length.

Resetting Contract State:
- Deploy -> Player enters -> Pick winner -> Empty list (return to deployed state)

Requiring a Manager:
- Use the require function to ensure only deployer can call pick winner.

Function Modifiers:
- using key word modifier to define new mondifcation
- end with _; - target for compiler

SECTION 4: Building Interactive Front Ends

Ethereum App Architecture:
- Using React 
- Traditional architecture is a handshake between user and serve.
    -- sending html pages and forms back and forth
- Servers do dramatically less in ethereum architecture. 
    -- mainly serves the html page
- Changing data in the contract is done through web3 and meta mask creating a transaction. 
- Server never receives private keys. 
    -- Does not modify the blockchain.
- Moving responsibilty to writing data to the client 
    -- Requires beefy clients.
- React allows for more business logic in the client side application.

SECTION 8 APPENDIX Basic React

JSK:
- Bundle.js compiled js files 
    -- webpack and babble take all the files and combine into one
- React is a js library used to produce html shown to a user in the browser
- Writing individual components/views that produces html js -> html
- React code = writing nested components 


